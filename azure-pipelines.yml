trigger:
- main

strategy:
  matrix:
    stable:
      rustup_toolchain: stable

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    persistCredentials: true

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"      
    displayName: install rust
  - script: cargo build --manifest-path ./effort_visualizer/Cargo.toml
    displayName: cargo build
  - script: cargo test --manifest-path ./effort_visualizer/Cargo.toml
    displayName: cargo test
  - script: cargo run --manifest-path ./effort_visualizer/Cargo.toml emit open-api-file > ./api-client/open-api.json
    displayName: emit open api file
  
  - task: Bash@3
    condition: succeeded()
    displayName: setup git
    inputs: 
      targetType: 'inline'
      script: |
        git config --global user.email "ryo13579978@gmail.com"
        git config --global user.name "harunari"
        if [ -n "$(git diff)" ]; then
          echo "##vso[task.setvariable variable=hasOpenApiDiff]true"
        else
          echo "##vso[task.setvariable variable=hasOpenApiDiff]false"
        fi
        git config --global url."https://${GITHUB_PAT}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
  
  - task: NodeTool@0
    condition: and(succeeded(), eq(variables['hasOpenApiDiff'], 'true'))
    inputs:
      versionSource: 'spec'
      versionSpec: '19.x'

  - task: Bash@3
    condition: and(succeeded(), eq(variables['hasOpenApiDiff'], 'true'))
    displayName: generate open api client
    inputs:
      targetType: 'inline'
      script: |
        cd ./api-client
        npm install
        npm version patch
        npx @openapitools/openapi-generator-cli generate -g typescript-fetch -i ./open-api.json
        git add ./package.json ./package-lock.json ./open-api.json
        npm publish
        git commit -m "update open api file [skip ci]" && git push origin HEAD:$(Build.SourceBranch)

  - task: Docker@2
    displayName: 'build and push effort visualizer backend image'
    inputs:
      containerRegistry: 'mydockerhub'
      repository: 'harunari/effort_visualizer'
      command: 'buildAndPush'
      Dockerfile: './effort_visualizer/Dockerfile'
      buildContext: '.'
      tags: |
        stable-$(Build.BuildId)
        stable

  - task: Docker@2
    displayName: 'build and push effort visualizer database image'
    inputs:
      containerRegistry: 'mydockerhub'
      repository: 'harunari/effort_visualizer_database'
      command: 'buildAndPush'
      Dockerfile: './postgres/Dockerfile'
      buildContext: './postgres'
      tags: |
        stable-$(Build.BuildId)
        stable